09 Customizing the Admin

To display the labels in the administration table, intead of having the default representation of a object as a string for example "Genre object (1)".
One way to fix this is to override the "str" magic method in that class.

In the "models.py" module we need to define a funtions with the "__str__(self)" magic method to our classes.

For the Genre class:
def __str__(self):
        return self.name

For the Movie class

def __str__(self):
        return self.title


To personalize the table and fields in the administration panel for our models we need to create a new class in the "admin.py" module from the "movies" app.

By convention we use the name of the class model and concatanete "Admin".  "GnereAdmin" and "MovieAdmin".
And we should derive this class from "admin.ModelAdmin" class from the "django.contrib" module.
This "admin.ModelAdmin" class is the representation of a module in the admin panel interface.
And by deriving our classes from the "admin.ModelAdmin" class, we inherite all the features from it, and then we can override them.

Then we can set the "list_display" attribute to a tupple with the columns we want to see.
We can use "fields" attribute to specify the fields we want to see in our form. Set to a tuple.
Use the exclude attribute to specify the fields we want to exclude from the form. Set to a tuple.

class GenreAdmin(admin.ModelAdmin):
    list_display = ("id", "date_created", "name")


class MovieAdmin(admin.ModelAdmin):
    exclude = ("date_created", )